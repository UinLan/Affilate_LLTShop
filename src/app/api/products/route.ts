'use server';

import { NextResponse } from 'next/server';
import Product from '@/lib/models/Product';
import connectDB from '@/lib/mongodb';
import { IProduct } from '@/types/product';
import { convertToClientProduct } from '@/lib/converters';
import Category from '@/lib/models/Category';
import PostHistory from '@/lib/models/PostHistory';
import axios from 'axios';

// K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
await connectDB();

// C·∫•u h√¨nh Facebook
const FACEBOOK_ACCESS_TOKEN = process.env.FACEBOOK_ACCESS_TOKEN;
const FACEBOOK_PAGE_ID = process.env.FACEBOOK_PAGE_ID;
const FB_API_VERSION = 'v18.0';

// Interface cho l·ªói c√≥ message
interface ErrorWithMessage {
  message: string;
}

// Ki·ªÉm tra n·∫øu error c√≥ message
function isErrorWithMessage(error: unknown): error is ErrorWithMessage {
  return typeof error === 'object' && error !== null && 'message' in error;
}

// L·∫•y message t·ª´ error
function getErrorMessage(error: unknown): string {
  if (isErrorWithMessage(error)) return error.message;
  return 'Unknown error';
}

// H√†m ghi log l·ªói
async function logError(message: string): Promise<void> {
  console.error('Error Notification:', message);
  // C√≥ th·ªÉ th√™m logic g·ª≠i email/notification ·ªü ƒë√¢y
}

// H√†m g·ªçi Ollama ƒë·ªÉ t·∫°o caption ti·∫øng Vi·ªát
async function generateFullCaptionWithOllama(product: any): Promise<string> {
  const shopeeInfo = product.shopeeUrl ? `\n\nüîó LINK MUA NGAY:\n${product.shopeeUrl}` : '';
  
  const prompt = `
H√£y vi·∫øt m·ªôt caption ti·∫øng Vi·ªát h·∫•p d·∫´n ƒë·ªÉ ƒëƒÉng Facebook qu·∫£ng b√° s·∫£n ph·∫©m v·ªõi c√°c th√¥ng tin sau:

- T√™n s·∫£n ph·∫©m: ${product.productName}
- M√¥ t·∫£: ${product.description || 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt'}
- Gi√° b√°n: ${product.price ? product.price.toLocaleString() + 'ƒë' : 'Li√™n h·ªá'} 
- Khuy·∫øn m√£i: ${product.discount || 'ƒêang c√≥ ∆∞u ƒë√£i h·∫•p d·∫´n'}

Y√äU C·∫¶U:
1. Vi·∫øt b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, thu h√∫t
2. Th√™m emoji ph√π h·ª£p
3. ƒê·∫∑t hashtag ·ªü CU·ªêI B√ÄI, sau link (n·∫øu c√≥)
4. Gi·ªçng vƒÉn k√≠ch th√≠ch mua h√†ng
5. LU√îN ƒê·∫∂T LINK SHOPEE TR∆Ø·ªöC HASHTAG N·∫æU C√ì
6. Kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn "caption" trong n·ªôi dung tr·∫£ v·ªÅ
7. ƒê·∫£m b·∫£o c·∫•u tr√∫c: [N·ªôi dung ch√≠nh] -> [Link] -> [Hashtag]

C·∫•u tr√∫c mong mu·ªën:
[N·ªôi dung ch√≠nh]

[Link (n·∫øu c√≥)]

[Hashtag]

Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung ho√†n ch·ªânh, kh√¥ng gi·∫£i th√≠ch th√™m.
${shopeeInfo}
`.trim();

  try {
    const response = await fetch('http://localhost:11434/api/generate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        model: 'llama3',
        prompt,
        stream: false
      })
    });

    const data = await response.json();
    return data.response?.trim() || 
      `üî• ${product.productName} - S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao!\n\nüíØ Gi√° ch·ªâ ${product.price ? product.price.toLocaleString() + 'ƒë' : 'li√™n h·ªá'}\n\n‚ú® ${product.description || 'ƒêang ƒë∆∞·ª£c ∆∞a chu·ªông nh·∫•t hi·ªán nay'}\n\nüîó ${product.shopeeUrl || ''}\n\n#khuyenmai #hotdeal #sanphamchatluong`;
  } catch (error) {
    console.error('L·ªói khi t·∫°o caption:', getErrorMessage(error));
    return `üéØ ${product.productName}\n\nüîπ ${product.description || 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao'}\n\nüí∞ Gi√°: ${product.price ? product.price.toLocaleString() + 'ƒë' : 'Li√™n h·ªá'}\n\nüõí ${product.shopeeUrl || ''}\n\n#sanphammoi #uudai`;
  }
}

// T·∫£i ·∫£nh l√™n Facebook
async function uploadImageToFacebook(imageUrl: string): Promise<{ id: string }> {
  try {
    const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
    const imageBuffer = Buffer.from(response.data, 'binary');
    const blob = new Blob([imageBuffer], { type: response.headers['content-type'] || 'image/jpeg' });

    const formData = new FormData();
    formData.append('access_token', FACEBOOK_ACCESS_TOKEN!);
    formData.append('source', blob, 'image.jpg');
    formData.append('published', 'false');

    const uploadResponse = await axios.post(
      `https://graph.facebook.com/${FB_API_VERSION}/${FACEBOOK_PAGE_ID}/photos`,
      formData,
      { headers: { 'Content-Type': 'multipart/form-data' } }
    );

    return uploadResponse.data;
  } catch (error) {
    console.error(`L·ªói khi t·∫£i ·∫£nh l√™n Facebook: ${imageUrl}`, getErrorMessage(error));
    throw error;
  }
}

// H√†m ki·ªÉm tra video URL
async function validateVideoUrl(url: string): Promise<{ valid: boolean; size: number; type: string }> {
  try {
    const response = await axios.head(url, { timeout: 5000 });
    
    if (!response.headers['content-type']?.includes('video/')) {
      throw new Error('URL kh√¥ng tr·ªè ƒë·∫øn file video h·ª£p l·ªá');
    }
    
    return {
      valid: true,
      size: parseInt(response.headers['content-length'] || '0'),
      type: response.headers['content-type']
    };
  } catch (error) {
    console.error('L·ªói ki·ªÉm tra video URL:', getErrorMessage(error));
    throw new Error(`Kh√¥ng th·ªÉ x√°c minh video URL: ${getErrorMessage(error)}`);
  }
}

// ƒêƒÉng b√†i l√™n Facebook
async function postToFacebook(
  caption: string, 
  imageIds: string[], 
  videoUrl?: string
): Promise<{ id: string; video_uploaded: boolean }> {
  try {
    let attachedMedia = imageIds.map(id => ({ media_fbid: id }));
    
    if (videoUrl && videoUrl.trim() !== '') {
      try {
        // B∆∞·ªõc 1: Ki·ªÉm tra video URL
        const videoInfo = await validateVideoUrl(videoUrl);
        
        // B∆∞·ªõc 2: T·∫°o video container
        const initResponse = await axios.post(
          `https://graph.facebook.com/${FB_API_VERSION}/${FACEBOOK_PAGE_ID}/videos`,
          {
            access_token: FACEBOOK_ACCESS_TOKEN,
            upload_phase: 'start',
            file_size: videoInfo.size,
            file_url: videoUrl,
            published: false,
            description: caption
          },
          { timeout: 10000 }
        );

        if (!initResponse.data.video_id) {
          throw new Error('Kh√¥ng th·ªÉ kh·ªüi t·∫°o upload video');
        }

        const videoId = initResponse.data.video_id;

        // B∆∞·ªõc 3: Transfer video t·ª´ URL
        await axios.post(
          `https://graph.facebook.com/${FB_API_VERSION}/${videoId}`,
          {
            access_token: FACEBOOK_ACCESS_TOKEN,
            upload_phase: 'transfer',
            start_offset: 0,
            end_offset: videoInfo.size,
            file_url: videoUrl
          },
          { timeout: 30000 }
        );

        // B∆∞·ªõc 4: Ho√†n t·∫•t upload
        await axios.post(
          `https://graph.facebook.com/${FB_API_VERSION}/${videoId}`,
          {
            access_token: FACEBOOK_ACCESS_TOKEN,
            upload_phase: 'finish',
            description: caption,
            published: true
          },
          { timeout: 10000 }
        );

        attachedMedia.push({ media_fbid: videoId });
        
        console.log(`ƒê√£ upload video th√†nh c√¥ng: ${videoId}`);
      } catch (error) {
        const errorMessage = getErrorMessage(error);
        console.error('L·ªói khi ƒëƒÉng video:', errorMessage);
        await logError(`L·ªói video: ${errorMessage}`);
      }
    }

    // ƒêƒÉng b√†i v·ªõi media ƒë√£ chu·∫©n b·ªã
    const postResponse = await axios.post(
      `https://graph.facebook.com/${FB_API_VERSION}/${FACEBOOK_PAGE_ID}/feed`,
      {
        access_token: FACEBOOK_ACCESS_TOKEN,
        message: caption,
        attached_media: attachedMedia,
        published: true
      },
      { timeout: 15000 }
    );
    
    return {
      ...postResponse.data,
      video_uploaded: !!videoUrl
    };
  } catch (error) {
    const errorMessage = getErrorMessage(error);
    console.error('L·ªói khi ƒëƒÉng b√†i l√™n Facebook:', errorMessage);
    throw new Error(`L·ªói ƒëƒÉng b√†i: ${errorMessage}`);
  }
}

// API GET - L·∫•y danh s√°ch s·∫£n ph·∫©m
export async function GET(request: Request): Promise<NextResponse> {
  try {
    const { searchParams } = new URL(request.url);
    const populate = searchParams.get('populate');
    const categorySlug = searchParams.get('category');
    const searchTerm = searchParams.get('search')?.trim();

    let mongoQuery: any = {};

    if (categorySlug) {
      const category = await Category.findOne({ slug: categorySlug });
      if (category) mongoQuery.categories = category._id;
      else return NextResponse.json({ success: true, data: [] }, { status: 200 });
    }

    if (searchTerm) {
      mongoQuery.$or = [
        { productName: { $regex: searchTerm, $options: 'i' } },
        { description: { $regex: searchTerm, $options: 'i' } }
      ];
    }

    let query = Product.find(mongoQuery).sort({ createdAt: -1 });
    if (populate === 'categories') {
      query = query.populate({ path: 'categories', select: '_id name slug' });
    }

    const products = await query.exec();
    const clientProducts = products.map(convertToClientProduct);

    return NextResponse.json({ success: true, data: clientProducts }, { status: 200 });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m' }, 
      { status: 500 }
    );
  }
}

// API POST - T·∫°o s·∫£n ph·∫©m m·ªõi v√† ƒëƒÉng l√™n Facebook
export async function POST(request: Request): Promise<NextResponse> {
  try {
    const productData: Omit<IProduct, 'postedHistory' | 'createdAt'> = await request.json();

    // Validate d·ªØ li·ªáu
    if (!productData.productName || !productData.images || productData.images.length === 0) {
      return NextResponse.json(
        { success: false, error: 'T√™n s·∫£n ph·∫©m v√† √≠t nh·∫•t 1 h√¨nh ·∫£nh l√† b·∫Øt bu·ªôc' },
        { status: 400 }
      );
    }

    const product = new Product({
      ...productData,
      postingTemplates: productData.postingTemplates || []
    });

    await product.save();

    // T·∫°o caption v·ªõi c·∫•u tr√∫c m·ªõi
    let caption = await generateFullCaptionWithOllama(product);

    // ƒê·∫£m b·∫£o c·∫•u tr√∫c ƒë√∫ng n·∫øu AI kh√¥ng tu√¢n th·ªß
    if (product.shopeeUrl && !caption.includes(product.shopeeUrl)) {
      caption = `${caption}\n\nüîó ${product.shopeeUrl}\n\n#khuyenmai #hotdeal`;
    }

    // Chu·∫©n h√≥a l·∫°i c√°c d√≤ng tr·ªëng
    caption = caption.replace(/\n{3,}/g, '\n\n');

    // Ch·ªçn ng·∫´u nhi√™n 4 ·∫£nh t·ª´ danh s√°ch
    const selectedImages = (product.images || [])
      .sort(() => 0.5 - Math.random())
      .slice(0, Math.min(product.images.length, 4));

    // T·∫£i ·∫£nh l√™n Facebook
    const uploadedImages = [];
    for (const imageUrl of selectedImages) {
      try {
        const uploadResult = await uploadImageToFacebook(imageUrl);
        uploadedImages.push(uploadResult);
      } catch (error) {
        console.error(`L·ªói khi t·∫£i ·∫£nh l√™n ${imageUrl}:`, getErrorMessage(error));
      }
    }

    if (uploadedImages.length === 0) {
      throw new Error('Kh√¥ng th·ªÉ t·∫£i l√™n b·∫•t k·ª≥ h√¨nh ·∫£nh n√†o');
    }

    // ƒêƒÉng b√†i l√™n Facebook (c·∫£ ·∫£nh v√† video n·∫øu c√≥)
    const postResult = await postToFacebook(
      caption,
      uploadedImages.map(img => img.id),
      product.videoUrl
    );

    // L∆∞u l·ªãch s·ª≠ ƒëƒÉng b√†i
    const postHistory = new PostHistory({
      productId: product._id,
      postId: postResult.id,
      caption,
      imagesUsed: uploadedImages.length,
      videoUsed: !!product.videoUrl,
      timestamp: new Date()
    });
    await postHistory.save();

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    product.lastPosted = new Date();
    await product.save();

    return NextResponse.json({ 
      success: true, 
      data: {
        product: convertToClientProduct(product),
        postId: postResult.id,
        caption,
        imagesUploaded: uploadedImages.length,
        videoUploaded: !!product.videoUrl
      },
      message: 'ƒêƒÉng s·∫£n ph·∫©m l√™n Facebook th√†nh c√¥ng'
    }, { status: 201 });
  } catch (error) {
    const errorMessage = getErrorMessage(error);
    console.error('L·ªói khi t·∫°o s·∫£n ph·∫©m:', errorMessage);
    return NextResponse.json({ 
      success: false, 
      error: errorMessage || 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o s·∫£n ph·∫©m',
      stack: process.env.NODE_ENV === 'development' ? (error as Error).stack : undefined
    }, { status: 500 });
  }
}